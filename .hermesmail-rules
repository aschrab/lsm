File.umask 007

require 'stringio'
require 'mail'
require '/home/lsm/ruby_lsm/lsm.rb'

::Mail.defaults do
  delivery_method :sendmail
end

def create_response
  response = ::Mail.new
  response.from = 'lsm@qqx.org'

  %w/ reply_to from unix_from /.each do |h|
    begin
      recipients = headers.__send__ h
      next unless recipients
      response.to = recipients
    rescue
    else
      break
    end
  end

  subject = headers.subject
  subject = "Re: #{subject}" unless subject =~ /^\s*Re:/
  response.subject = subject

  if message_id = headers.message_id
    refs = headers.references.map(&:to_s) rescue []
    refs << message_id
    response.header['References'] = refs.map{|r| "<#{r}>" }.join(' ')
    response.header['In-Reply-To'] = "<#{message_id}>"
  end

  yield response if block_given?
  response
end

class Hermes::Message
  def content_type
    headers[:content_type] || 'text/plain'
  end

  def check_lsm response = ''
    if is_multipart?
      body.each { |part| part.check_lsm response }
    elsif content_type == 'text/plain' and body_decoded[/^Begin4/]
      check_entry body_decoded, response
    else
      File.open( "/tmp/lsm.log", 'a' ) do |lsm_log|
        lsm_log.puts "Content type: #{content_type}"
      end
    end

    response
  end

  def check_entry body, response
    io = StringIO.new body
    entry = LSM::Entry.new.from_file io

    if output = entry.report_errors
      response << "The following entry has errors, it will NOT be added.\n\n"
      response << output
      response << "\n\n"
    else
      response << "The following entry looks correct, it will be added.\n\n"
      response << entry.format
      response << "\n\n"

      File.open( Time.now.strftime('/home/lsm/updates/lsm.%Y-%m-%d'), 'a' ) do |f|
        f.flock File::LOCK_EX
        f.puts entry.format
        f.puts ''
      end
    end
  rescue
  end
end

def process
  case headers.subject
  when /^\s*add\s*$/
    response_body = check_lsm
    response_body = "No LSM entries were found" if response_body == ''

    create_response do |response|
      response.bcc = 'LSM Maintainer <aaron@schrab.com>'
      response.body = response_body

      $stderr.puts response.encoded
      # FIXME send response
    end
  when /^\s*(template|help)\s*$/
    create_response do |response|
      response.body = File.read "#{ENV['HOME']}/lsm-template"
      response.deliver!
    end
  end

  done
end

# vim: ft=ruby
